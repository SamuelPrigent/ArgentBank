swagger: "2.0"
info:
  title: Bank Argent API documentation
  description: Contains all available API endpoints in this codebase
  version: "1.0.0"
  termsOfService: "http://swagger.io/terms/"
host: localhost:3001
basePath: /api/v1
schemes:
  - http
  ## path
paths:
  # path > login
  /user/login:
    post:
      tags:
        - User Module
      summary: Connection
      description: API for Login
      parameters:
        - in: body
          name: body
          description: Login Payload
          required: true
          schema:
            $ref: "#/definitions/Login"
      produces:
        - application/json
      responses:
        200:
          description: Login Successfully
          schema:
            $ref: "#/definitions/LoginResponse"
        400:
          description: Invalid Fields
        500:
          description: Internal Server Error
  # path > sign up
  /user/signup:
    post:
      tags:
        - User Module
      summary: Create a user account
      description: API for Signup
      parameters:
        - in: body
          name: body
          description: Signup Payload
          required: true
          schema:
            $ref: "#/definitions/User"
      produces:
        - application/json
      responses:
        200:
          description: Signup Successfully
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: Invalid Fields
        500:
          description: Internal Server Error
  # path > profile
  /user/profile:
    # profile.post
    post:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for fetching a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
      produces:
        - application/json
      responses:
        200:
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: Invalid Fields
        500:
          description: Internal Server Error
    # profile.put
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: User Profile API
      description: API for updating a user profile
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
          required: true
        - in: body
          name: body
          description: Update user profile attributes
          required: true
          schema:
            $ref: "#/definitions/UserProfile"
      produces:
        - application/json
      responses:
        200:
          description: User profile retrieved successully
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: Invalid Fields
        500:
          description: Internal Server Error
  # paths for transactions of user
  /users/{userId}/transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Get all transactions of the user
      description: Returns a list of transactions
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
        - in: path
          name: accountId
          description: Account id
          required: true
          type: string
      responses:
        200:
          description: Transactions retrieved successfully
          schema:
            $ref: "#/definitions/Transactions"
        401:
          description: Authorization error
        404:
          description: User doenst exist
        500:
          description: Internal Server Error
  # paths for one transaction of user
  /users/{userId}/transactions/{transactionId}:
    # tractionsId.get
    get:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Gets single user transaction
      description: Return the specific transaction information
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
        - in: path
          name: accountId
          description: Account id
          required: true
          type: string
        - in: path
          name: transactionId
          description: Transaction id
          required: true
          type: string
      responses:
        200:
          description: Transaction retrieved successfully
          schema:
            $ref: "#/definitions/Transaction"
        401:
          description: Authorization error
        404:
          description: Transaction does not exist
        500:
          description: Internal Server Error
    # transactionsId.put
    put:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Edit a transaction of user
      description: Edit a transaction of user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
        - in: path
          name: accountId
          description: Account id
          required: true
          type: string
        - in: path
          name: transactionId
          description: Transaction id
          required: true
          type: string
        - in: body
          name: body
          description: Update transaction attribute
          required: true
          schema:
            $ref: "#/definitions/Transaction"
      responses:
        200:
          description: Successfully updated transaction informations
          schema:
            $ref: "#/definitions/Transaction"
        401:
          description: Authorization error
        404:
          description: Transaction does not exist
        500:
          description: Internal Server Error
    # transactionsId.delete
    delete:
      security:
        - Bearer: []
      tags:
        - Transactions
      summary: Delete a transaction of user
      description: Delete a transaction of user
      produces:
        - "application/json"
      parameters:
        - in: header
          name: Authorization
          description: Attach Bearer JWT token
        - in: path
          name: accountId
          description: Account id
          required: true
          type: string
        - in: path
          name: transactionId
          description: Transaction id
          required: true
          type: string
      responses:
        200:
          description: Successfully deleted transaction
        401:
          description: Authorization error
        404:
          description: Transaction does not exist
        500:
          description: Internal Server Error
## security definitions (schema)
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
definitions:
  # security def.. > user
  User:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
      firstName:
        type: string
        description: user first name
      lastName:
        type: string
        description: user last name
  # security def.. > login
  Login:
    properties:
      email:
        type: string
        description: user email
      password:
        type: string
        description: user password
  # security def.. > api response
  ApiResponse:
    type: object
    properties:
      status:
        type: integer
      message:
        type: string
      body:
        type: object
        properties:
          id:
            type: string
          email:
            type: string
  # security def.. > login response
  LoginResponse:
    type: object
    properties:
      token:
        type: string
  # security def.. > user profile
  UserProfile:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
  # security def.. > transaction
  Transaction:
    type: object
    properties:
      amount:
        type: integer
        format: int64
      currency:
        type: string
      description:
        type: string
      date:
        type: string
      category:
        type: string
      note:
        type: string
    example:
      amount: 350
      currency: USD
      description: Payment of Designers
      date: "2023-07-12"
      category: Expenses
      note: Design for SportAnalytics
  # security def.. > transactions
  Transactions:
    type: array
    items:
      $ref: "#/definitions/Transaction"
    example:
      - amount: 350
        currency: USD
        description: Payment of Designers
        date: "2023-07-12"
        category: Expenses
        note: Design for SportAnalytics
      - amount: 470
        currency: USD
        description: Monitor for new employees
        date: "2023-08-14"
        category: Expenses
        note: New frontend developpers
